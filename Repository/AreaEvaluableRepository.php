<?php


namespace Itsur\AeiBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * AreaEvalubleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AreaEvaluableRepository extends EntityRepository
{

    public function findByPeriodoAndFichaAndOrder(
    $periodo, $ficha, $area)
    {
       $query = $this->getEntityManager()
        ->createQuery('
            SELECT ar FROM ItsurAeiBundle:AreaEvaluable ge
            JOIN ge.tema as te
            JOIN te.seccion as se
            JOIN se.area as ar
            JOIN ar.hoja as ho
            JOIN ho.aspirante as asp
            JOIN ho.periodo as pe
            WHERE
                     pe.id = :periodo
              AND asp.ficha = :ficha
              AND ar.orden = :areaorden
              AND se.orden = :seccionorden
              AND te.orden = :temaorden
              AND ge.orden = :grupoorden'
        )
        ->setParameter('periodo', $periodo)
        ->setParameter('ficha', $ficha)
        ->setParameter('areaorden', $area)
        ->setParameter('seccionorden', $seccion)
        ->setParameter('temaorden', $tema)
        ->setParameter('grupoorden', $orden);
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
 
    }

    public function avegareAreasByPeriodo($periodo)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  a.nombre as area, AVG(ae.calificacion) as promedio
            FROM ItsurAeiBundle:AreaEvaluable ae
            JOIN ae.area as a
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            WHERE  
              p.id = :periodo
            GROUP BY a.nombre'

        )->setParameter('periodo', $periodo);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function maximumAreasByPeriodo($periodo)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  a.nombre as area, MAX(ae.calificacion) as maximo
            FROM ItsurAeiBundle:AreaEvaluable ae
            JOIN ae.area as a
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            WHERE  
              p.id = :periodo
            GROUP BY a.nombre'

        )->setParameter('periodo', $periodo);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function minimumAreasByPeriodo($periodo)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  a.nombre as area, MIN(ae.calificacion) as minimo
            FROM ItsurAeiBundle:AreaEvaluable ae
            JOIN ae.area as a
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            WHERE  
              p.id = :periodo
            GROUP BY a.nombre'

        )->setParameter('periodo', $periodo);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function avegareAreasByPeriodoAndCarrera($periodo, $carrera)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  a.nombre as area, AVG(ae.calificacion) as promedio
            FROM ItsurAeiBundle:AreaEvaluable ae
            JOIN ae.area as a
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            JOIN h.aspirante as asp
            WHERE  
              p.id = :periodo
              AND asp.carrera = :carrera
            GROUP BY a.nombre'

        )->setParameter('periodo', $periodo)
         ->setParameter('carrera', $carrera);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function maximumAreasByPeriodoAndCarrera($periodo, $carrera)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  a.nombre as area, MAX(ae.calificacion) as maximo
            FROM ItsurAeiBundle:AreaEvaluable ae
            JOIN ae.area as a
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            JOIN h.aspirante as asp
            WHERE  
              p.id = :periodo
              AND asp.carrera = :carrera
            GROUP BY a.nombre'

        )->setParameter('periodo', $periodo)
         ->setParameter('carrera', $carrera);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }


    public function minimumAreasByPeriodoAndCarrera($periodo, $carrera)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  a.nombre as area, MIN(ae.calificacion) as minimo
            FROM ItsurAeiBundle:AreaEvaluable ae
            JOIN ae.area as a
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            JOIN h.aspirante as asp
            WHERE  
              p.id = :periodo
              AND asp.carrera = :carrera
            GROUP BY a.nombre'

        )->setParameter('periodo', $periodo)
         ->setParameter('carrera', $carrera);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function standarDesviationAreasByPeriodo($periodo)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  a.nombre as area, STD(ae.calificacion) as desviacion
            FROM ItsurAeiBundle:AreaEvaluable ae
            JOIN ae.area as a
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            WHERE  
              p.id = :periodo
            GROUP BY a.nombre'

        )->setParameter('periodo', $periodo);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    

}
?>