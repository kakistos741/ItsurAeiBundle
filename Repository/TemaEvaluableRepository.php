<?php


namespace Itsur\AeiBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * GrupoEvalubleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TemaEvaluableRepository extends EntityRepository
{

    public function findByPeriodoAndFichaAndAreaAndSeccionAndOrder(
    $periodo, $ficha, $area, $seccion, $orden)
    {
       $query = $this->getEntityManager()
        ->createQuery('
            SELECT te FROM ItsurAeiBundle:TemaEvaluable te
            JOIN te.seccion as se
            JOIN se.area as ar
            JOIN ar.hoja as ho
            JOIN ho.aspirante as asp
            JOIN ho.periodo as pe
            WHERE
                     pe.id = :periodo
              AND asp.ficha = :ficha
              AND ar.orden = :areaorden
              AND se.orden = :seccionorden
              AND te.orden = :temaorden'
        )
        ->setParameter('periodo', $periodo)
        ->setParameter('ficha', $ficha)
        ->setParameter('areaorden', $area)
        ->setParameter('seccionorden', $seccion)
        ->setParameter('temaorden', $orden);
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

    public function avegareTemasByPeriodo($periodo)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  t.nombre as tema, AVG(te.calificacion) as promedio
            FROM ItsurAeiBundle:TemaEvaluable te
            JOIN te.seccion se
            JOIN se.area ae
            JOIN te.tema as t
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            WHERE  
              p.id = :periodo
            GROUP BY t.nombre'
        )->setParameter('periodo', $periodo);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function minimumTemasByPeriodo($periodo)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  t.nombre as tema, MIN(te.calificacion) as minimo
            FROM ItsurAeiBundle:TemaEvaluable te
            JOIN te.seccion se
            JOIN se.area ae
            JOIN te.tema as t
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            WHERE  
              p.id = :periodo
            GROUP BY t.nombre'
        )->setParameter('periodo', $periodo);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function maximumTemasByPeriodo($periodo)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  t.nombre as tema, MAX(te.calificacion) as maximo
            FROM ItsurAeiBundle:TemaEvaluable te
            JOIN te.seccion se
            JOIN se.area ae
            JOIN te.tema as t
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            WHERE  
              p.id = :periodo
            GROUP BY t.nombre'
        )->setParameter('periodo', $periodo);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function avegareTemasByPeriodoAndCarrera($periodo, $carrera)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  t.nombre as tema, AVG(te.calificacion) as promedio
            FROM ItsurAeiBundle:TemaEvaluable te
            JOIN te.seccion se
            JOIN se.area ae
            JOIN te.tema as t
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            JOIN h.aspirante as asp
            WHERE  
              p.id = :periodo
              AND asp.carrera = :carrera
            GROUP BY t.nombre'
        )->setParameter('periodo', $periodo)
        ->setParameter('carrera', $carrera);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function minimumTemasByPeriodoAndCarrera($periodo, $carrera)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  t.nombre as tema, MIN(te.calificacion) as minimo
            FROM ItsurAeiBundle:TemaEvaluable te
            JOIN te.seccion se
            JOIN se.area ae
            JOIN te.tema as t
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            JOIN h.aspirante as asp
            WHERE  
              p.id = :periodo
              AND asp.carrera = :carrera
            GROUP BY t.nombre'
        )->setParameter('periodo', $periodo)
        ->setParameter('carrera', $carrera);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function maximumTemasByPeriodoAndCarrera($periodo, $carrera)
    {
      $query = $this->getEntityManager()
        ->createQuery('
            SELECT  t.nombre as tema, MAX(te.calificacion) as maximo
            FROM ItsurAeiBundle:TemaEvaluable te
            JOIN te.seccion se
            JOIN se.area ae
            JOIN te.tema as t
            JOIN ae.hoja  as h
            JOIN h.periodo as p
            JOIN h.aspirante as asp
            WHERE  
              p.id = :periodo
              AND asp.carrera = :carrera
            GROUP BY t.nombre'
        )->setParameter('periodo', $periodo)
        ->setParameter('carrera', $carrera);
        try {
            return $query->getResult(Query::HYDRATE_SCALAR);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
?>